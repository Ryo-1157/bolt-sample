[["/home/project/app/api/auth/[...nextauth]/route.ts","import NextAuth from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport bcrypt from \"bcryptjs\";\n\n// インメモリデータストア\nconst users = [\n  {\n    id: \"1\",\n    name: \"Admin User\",\n    email: \"admin@example.com\",\n    password: bcrypt.hashSync(\"password123\", 10),\n    role: \"executive\"\n  },\n  {\n    id: \"2\",\n    name: \"Employee User\",\n    email: \"employee@example.com\",\n    password: bcrypt.hashSync(\"password123\", 10),\n    role: \"employee\"\n  }\n];\n\nexport const authOptions = {\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"text\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n        const user = users.find(u => u.email === credentials.email);\n        if (!user) {\n          return null;\n        }\n        const isPasswordValid = await bcrypt.compare(credentials.password, user.password);\n        if (!isPasswordValid) {\n          return null;\n        }\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          role: user.role,\n        };\n      }\n    })\n  ],\n  session: {\n    strategy: \"jwt\",\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.role = user.role;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (session?.user) {\n        session.user.role = token.role;\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: \"/login\",\n  },\n};\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };"]]